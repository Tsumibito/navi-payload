#!/usr/bin/env tsx
/**
 * –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: Tags ‚Üí TagsNew
 * 
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã (translations array) 
 * –≤ –Ω–æ–≤—É—é —Å—Ö–µ–º—É (–Ω–∞—Ç–∏–≤–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è Payload)
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - Dry-run (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): pnpm migrate:tags-localized --dry-run
 * - –¢–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è 3 –∑–∞–ø–∏—Å–µ–π: pnpm migrate:tags-localized --limit 3
 * - –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: pnpm migrate:tags-localized
 */

import { getPayload } from 'payload';
import config from '../src/payload.config';

type OldTag = {
  id: string | number;
  name: string;
  slug: string;
  image?: string | { id: string };
  summary?: string;
  content?: any;
  posts?: any[];
  faqs?: any[];
  descriptionForAI?: string;
  socialImages?: {
    thumbnail?: string | { id: string };
    image16x9?: string | { id: string };
    image5x4?: string | { id: string };
  };
  seo?: {
    title?: string;
    meta_description?: string;
    og_image?: string | { id: string };
    focus_keyphrase?: string;
    no_index?: boolean;
    no_follow?: boolean;
  };
  translations?: Array<{
    language: 'ru' | 'ua' | 'en';
    name?: string;
    slug?: string;
    summary?: string;
    content?: any;
    seo?: {
      title?: string;
      meta_description?: string;
      focus_keyphrase?: string;
    };
  }>;
};

const extractMediaId = (field: string | number | { id: string | number } | undefined): number | undefined => {
  if (!field) return undefined;
  if (typeof field === 'string') return parseInt(field, 10);
  if (typeof field === 'number') return field;
  return typeof field.id === 'string' ? parseInt(field.id, 10) : field.id;
};

async function migrateTagsToLocalized() {
  const args = process.argv.slice(2);
  const isDryRun = args.includes('--dry-run');
  const limitArg = args.find(arg => arg.startsWith('--limit'));
  const limit = limitArg ? parseInt(limitArg.split('=')[1], 10) : undefined;

  console.log('\nüöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ Tags ‚Üí TagsNew');
  console.log(`   –†–µ–∂–∏–º: ${isDryRun ? 'üîç DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' : '‚úçÔ∏è  –ó–ê–ü–ò–°–¨ –í –ë–î'}`);
  if (limit) console.log(`   –õ–∏–º–∏—Ç: ${limit} –∑–∞–ø–∏—Å–µ–π`);
  console.log('');

  const payload = await getPayload({ config });

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Tags...');
    const { docs: oldTags } = await payload.find({
      collection: 'tags',
      limit: limit || 1000,
      depth: 0, // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    }) as { docs: OldTag[] };

    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${oldTags.length} —Ç–µ–≥–æ–≤\n`);

    if (oldTags.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }

    const stats = {
      processed: 0,
      created: 0,
      skipped: 0,
      errors: 0,
    };

    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–≥
    for (const oldTag of oldTags) {
      stats.processed++;
      console.log(`\n[${stats.processed}/${oldTags.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞: ${oldTag.name} (id: ${oldTag.id})`);

      try {
        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤)
        const imageId = extractMediaId(oldTag.image);
        const thumbnailId = extractMediaId(oldTag.socialImages?.thumbnail);
        const image16x9Id = extractMediaId(oldTag.socialImages?.image16x9);
        const image5x4Id = extractMediaId(oldTag.socialImages?.image5x4);
        const seoImageId = extractMediaId(oldTag.seo?.og_image);

        // –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤: –∏–∑ —Å—Ç–∞—Ä—ã—Ö translations –≤ –Ω–∞—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞–ª–∏ Payload
        const localeMap: Record<'ru' | 'uk' | 'en', any> = {
          ru: {
            name: oldTag.name,
            slug: oldTag.slug,
            summary: oldTag.summary || '',
            content: oldTag.content,
            descriptionForAI: oldTag.descriptionForAI,
            seo_title: oldTag.seo?.title || '',
            seo_description: oldTag.seo?.meta_description || '',
            focus_keyphrase: oldTag.seo?.focus_keyphrase || '',
            link_keywords: oldTag.seo?.additional_fields?.link_keywords || '',
          },
          uk: { name: '', slug: '', summary: '', content: null, descriptionForAI: '', seo_title: '', seo_description: '', focus_keyphrase: '', link_keywords: '' },
          en: { name: '', slug: '', summary: '', content: null, descriptionForAI: '', seo_title: '', seo_description: '', focus_keyphrase: '', link_keywords: '' },
        };

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ translations array
        if (oldTag.translations && Array.isArray(oldTag.translations)) {
          for (const trans of oldTag.translations) {
            const lang = trans.language === 'ua' ? 'uk' : trans.language; // ua ‚Üí uk
            if (lang in localeMap) {
              localeMap[lang] = {
                name: trans.name || localeMap[lang].name,
                slug: trans.slug || localeMap[lang].slug,
                summary: trans.summary || localeMap[lang].summary,
                content: trans.content || localeMap[lang].content,
                descriptionForAI: localeMap[lang].descriptionForAI, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ RU
                seo_title: trans.seo?.title || localeMap[lang].seo_title,
                seo_description: trans.seo?.meta_description || localeMap[lang].seo_description,
                focus_keyphrase: trans.seo?.focus_keyphrase || localeMap[lang].focus_keyphrase,
                link_keywords: trans.seo?.additional_fields?.link_keywords || localeMap[lang].link_keywords,
              };
            }
          }
        }

        if (isDryRun) {
          console.log('   üîç DRY RUN: –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:');
          console.log(`      - RU: ${localeMap.ru.name} (slug: ${localeMap.ru.slug})`);
          console.log(`      - UK: ${localeMap.uk.name || '(–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞)'} (slug: ${localeMap.uk.slug || '(–Ω–µ—Ç)'})`);
          console.log(`      - EN: ${localeMap.en.name || '(–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞)'} (slug: ${localeMap.en.slug || '(–Ω–µ—Ç)'})`);
          console.log(`      - Image: ${imageId || '–Ω–µ—Ç'}`);
          console.log(`      - Posts: ${oldTag.posts?.length || 0}, FAQs: ${oldTag.faqs?.length || 0}`);
          stats.skipped++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ TagsNew —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –ª–æ–∫–∞–ª—å—é (ru)
        const newTag = await payload.create({
          collection: 'tags-new',
          data: {
            name: localeMap.ru.name,
            slug: localeMap.ru.slug,
            summary: localeMap.ru.summary,
            content: localeMap.ru.content,
            descriptionForAI: localeMap.ru.descriptionForAI,
            seo: {
              title: localeMap.ru.seo_title,
              meta_description: localeMap.ru.seo_description,
              og_image: seoImageId,
              focus_keyphrase: localeMap.ru.focus_keyphrase,
              link_keywords: localeMap.ru.link_keywords,
              no_index: oldTag.seo?.no_index || false,
              no_follow: oldTag.seo?.no_follow || false,
            },
            image: imageId,
            socialImages: (thumbnailId || image16x9Id || image5x4Id) ? {
              thumbnail: thumbnailId,
              image16x9: image16x9Id,
              image5x4: image5x4Id,
            } : undefined,
            posts: oldTag.posts || [],
            faqs: oldTag.faqs || [],
            _status: 'published',
          },
          locale: 'ru',
        } as any);

        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω (RU): ${newTag.id}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏ UK –∏ EN, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
        for (const locale of ['uk', 'en'] as const) {
          const localeData = localeMap[locale];
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
          if (!localeData.name && !localeData.slug) {
            console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (${locale.toUpperCase()}): –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞`);
            continue;
          }

          await payload.update({
            collection: 'tags-new',
            id: newTag.id,
            data: {
              name: localeData.name,
              slug: localeData.slug,
              summary: localeData.summary,
              content: localeData.content,
              descriptionForAI: localeData.descriptionForAI,
              seo: {
                title: localeData.seo_title,
                meta_description: localeData.seo_description,
                focus_keyphrase: localeData.focus_keyphrase,
                link_keywords: localeData.link_keywords,
              },
            },
            locale,
          } as any);

          console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω (${locale.toUpperCase()})`);
        }

        stats.created++;
      } catch (error) {
        stats.errors++;
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–µ–≥–∞ ${oldTag.name}:`, error);
      }
    }

    // 3. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log('='.repeat(60));
    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:  ${stats.processed}`);
    console.log(`–°–æ–∑–¥–∞–Ω–æ:     ${stats.created}`);
    console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ:   ${stats.skipped}`);
    console.log(`–û—à–∏–±–æ–∫:      ${stats.errors}`);
    console.log('='.repeat(60) + '\n');

    if (isDryRun) {
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏\n');
    } else {
      console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
      console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ TagsNew —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É');
      console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      console.log('   3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ TagsNew\n');
    }

  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫
migrateTagsToLocalized();
