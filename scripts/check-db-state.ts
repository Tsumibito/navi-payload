import 'dotenv/config';
import pg from 'pg';

const pool = new pg.Pool({
  connectionString: process.env.DATABASE_URI,
});

async function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
  const collections = [
    'users',
    'media', 
    'posts',
    'tags',
    'tags_new',
    'team',
    'faqs',
    'certificates',
    'trainings',
    'redirects',
  ];
  
  console.log('üìã –¢–∞–±–ª–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π:\n');
  
  for (const table of collections) {
    const res = await pool.query(
      `SELECT table_schema, table_name FROM information_schema.tables WHERE table_name = $1;`,
      [table],
    );
    
    if (res.rowCount === 0) {
      console.log(`‚ùå ${table} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      const schema = res.rows[0].table_schema;
      
      // –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
      const countRes = await pool.query(
        `SELECT COUNT(*) as count FROM ${schema}.${table};`
      );
      const count = countRes.rows[0].count;
      
      console.log(`‚úÖ ${schema}.${table} - ${count} –∑–∞–ø–∏—Å–µ–π`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  console.log('\nüåç –¢–∞–±–ª–∏—Ü—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:\n');
  
  const localesTables = [
    'tags_locales',
    'tags_new_locales',
    'posts_locales',
    'team_locales',
  ];
  
  for (const table of localesTables) {
    const res = await pool.query(
      `SELECT table_schema, table_name FROM information_schema.tables WHERE table_name = $1;`,
      [table],
    );
    
    if (res.rowCount === 0) {
      console.log(`‚ùå ${table} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      const schema = res.rows[0].table_schema;
      const countRes = await pool.query(
        `SELECT COUNT(*) as count FROM ${schema}.${table};`
      );
      const count = countRes.rows[0].count;
      console.log(`‚úÖ ${schema}.${table} - ${count} –∑–∞–ø–∏—Å–µ–π`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã translations (—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞)
  console.log('\nüìù –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞):\n');
  
  const translationsTables = [
    'tags_translations',
    'posts_translations',
    'team_translations',
  ];
  
  for (const table of translationsTables) {
    const res = await pool.query(
      `SELECT table_schema, table_name FROM information_schema.tables WHERE table_name = $1;`,
      [table],
    );
    
    if (res.rowCount === 0) {
      console.log(`‚ùå ${table} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      const schema = res.rows[0].table_schema;
      const countRes = await pool.query(
        `SELECT COUNT(*) as count FROM ${schema}.${table};`
      );
      const count = countRes.rows[0].count;
      console.log(`‚úÖ ${schema}.${table} - ${count} –∑–∞–ø–∏—Å–µ–π`);
    }
  }
  
  await pool.end();
}

main().catch((err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', err);
  process.exit(1);
});
