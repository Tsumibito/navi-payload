/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ locale –≤ —Ç–∞–±–ª–∏—Ü—É seo-stats
 * 
 * –≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –¥–ª—è SEO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
 * –ö–∞–∂–¥–∞—è –ª–æ–∫–∞–ª—å (ru, ua, en) –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 */

const { getPayload } = require('payload');
const config = require('../../dist/payload.config.js').default;

async function migrate() {
  console.log('üöÄ Starting migration: add locale to seo-stats');
  
  try {
    const payload = await getPayload({ config });
    const db = payload.db.drizzle;

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ locale
    console.log('üìã Step 1: Checking if locale column exists...');
    const checkColumn = await db.execute(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_schema = 'navi' 
        AND table_name = 'seo-stats' 
        AND column_name = 'locale'
    `);

    if (checkColumn.rows && checkColumn.rows.length > 0) {
      console.log('‚úÖ Column locale already exists. Skipping migration.');
      process.exit(0);
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É locale
    console.log('üìã Step 2: Adding locale column...');
    await db.execute(`
      ALTER TABLE navi."seo-stats" 
      ADD COLUMN locale VARCHAR(10) DEFAULT 'uk'
    `);
    console.log('‚úÖ Column locale added');

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üìã Step 3: Setting locale for existing records...');
    const updateResult = await db.execute(`
      UPDATE navi."seo-stats" 
      SET locale = 'uk' 
      WHERE locale IS NULL
    `);
    console.log(`‚úÖ Updated ${updateResult.rowCount || 0} existing records with locale='uk'`);

    // 4. –î–µ–ª–∞–µ–º –∫–æ–ª–æ–Ω–∫—É NOT NULL
    console.log('üìã Step 4: Making locale NOT NULL...');
    await db.execute(`
      ALTER TABLE navi."seo-stats" 
      ALTER COLUMN locale SET NOT NULL
    `);
    console.log('‚úÖ Column locale is now NOT NULL');

    // 5. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('üìã Step 5: Removing old index (if exists)...');
    try {
      await db.execute(`
        DROP INDEX IF EXISTS navi.idx_seo_stats_entity
      `);
      console.log('‚úÖ Old index removed');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Old index not found, skipping');
    }

    // 6. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å locale
    console.log('üìã Step 6: Creating new unique index...');
    await db.execute(`
      CREATE UNIQUE INDEX IF NOT EXISTS idx_seo_stats_entity_locale 
      ON navi."seo-stats" (entity_type, entity_id, locale)
    `);
    console.log('‚úÖ Unique index created: (entity_type, entity_id, locale)');

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã Step 7: Verifying table structure...');
    const structure = await db.execute(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_schema = 'navi' 
        AND table_name = 'seo-stats'
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìä Final table structure:');
    console.table(structure.rows);

    console.log('\nüéâ Migration completed successfully!');
    console.log('\n‚úÖ What was done:');
    console.log('  1. Added locale column (VARCHAR(10), NOT NULL, default: uk)');
    console.log('  2. Set locale=uk for all existing records');
    console.log('  3. Created unique index on (entity_type, entity_id, locale)');
    console.log('\nüí° Now you can have separate SEO data for each locale (ru, ua, en)');

    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Migration failed:', error);
    console.error('\nüìã Error details:');
    console.error('  Message:', error.message);
    console.error('  Stack:', error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrate();
