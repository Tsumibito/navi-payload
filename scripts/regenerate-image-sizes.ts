import sharp from 'sharp'
import fs from 'fs'
import path from 'path'
import { Client } from 'pg'

/**
 * –°–∫—Ä–∏–ø—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ PostgreSQL –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ Payload
 */

const imageSizes = [
  {
    name: 'thumbnail',
    width: 150,
    height: 150,
    fit: 'cover' as const,
    position: 'centre' as const,
    format: 'webp' as const,
    quality: 80,
  },
  {
    name: 'post',
    width: 800,
    fit: 'inside' as const,
    format: 'webp' as const,
    quality: 85,
  },
  {
    name: 'card',
    width: 640,
    fit: 'inside' as const,
    format: 'webp' as const,
    quality: 85,
  },
  {
    name: 'og',
    width: 1200,
    height: 630,
    fit: 'cover' as const,
    position: 'centre' as const,
    format: 'webp' as const,
    quality: 90,
  },
  {
    name: 'featured',
    width: 1920,
    fit: 'inside' as const,
    format: 'webp' as const,
    quality: 90,
  },
]

async function regenerateImageSizes() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n')

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
  const client = new Client({
    connectionString: process.env.DATABASE_URI,
  })

  await client.connect()
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL\n')

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ media —Ñ–∞–π–ª—ã
  const result = await client.query(`
    SELECT id, filename, mime_type
    FROM media
    WHERE mime_type LIKE 'image/%'
    ORDER BY id
  `)

  const mediaFiles = result.rows
  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${mediaFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n`)

  let processed = 0
  let skipped = 0
  let errors = 0

  for (const media of mediaFiles) {
    const filename = media.filename as string
    const originalPath = path.join(process.cwd(), 'public/media', filename)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    if (!fs.existsSync(originalPath)) {
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${filename}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      skipped++
      continue
    }

    console.log(`\nüñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞: ${filename}`)

    try {
      const image = sharp(originalPath)
      const metadata = await image.metadata()

      console.log(`   –û—Ä–∏–≥–∏–Ω–∞–ª: ${metadata.width}√ó${metadata.height}`)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä
      for (const size of imageSizes) {
        const outputFilename = `${path.parse(filename).name}-${size.width}${size.height ? `x${size.height}` : ''}.${size.format}`
        const outputPath = path.join(process.cwd(), 'public/media', outputFilename)

        // –°–æ–∑–¥–∞–µ–º sharp instance –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        let resizer = sharp(originalPath)

        // –ü—Ä–∏–º–µ–Ω—è–µ–º resize —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const resizeOptions: {
          width: number
          height?: number
          fit: 'cover' | 'inside'
          position?: 'centre'
        } = {
          width: size.width,
          fit: size.fit,
        }

        if (size.height) {
          resizeOptions.height = size.height
        }

        if (size.position) {
          resizeOptions.position = size.position
        }

        resizer = resizer.resize(resizeOptions)

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ webp —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
        if (size.format === 'webp') {
          resizer = resizer.webp({ quality: size.quality })
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await resizer.toFile(outputPath)

        const stats = fs.statSync(outputPath)
        const sizeKb = (stats.size / 1024).toFixed(1)
        console.log(`   ‚úÖ ${size.name}: ${outputFilename} (${sizeKb} KB)`)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
      const sizes: Record<string, {
        filename: string
        mimeType: string
        filesize: number
        width?: number
        height?: number
        url: string
      }> = {}
      for (const size of imageSizes) {
        const sizeFilename = `${path.parse(filename).name}-${size.width}${size.height ? `x${size.height}` : ''}.${size.format}`
        const sizePath = path.join(process.cwd(), 'public/media', sizeFilename)
        
        if (fs.existsSync(sizePath)) {
          const stats = fs.statSync(sizePath)
          const sizeMetadata = await sharp(sizePath).metadata()
          
          sizes[size.name] = {
            filename: sizeFilename,
            mimeType: `image/${size.format}`,
            filesize: stats.size,
            width: sizeMetadata.width,
            height: sizeMetadata.height,
            url: `/media/${sizeFilename}`,
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ PostgreSQL
      await client.query(
        `UPDATE media SET sizes = $1 WHERE id = $2`,
        [JSON.stringify(sizes), media.id]
      )

      processed++
      console.log(`   üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`)
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filename}:`, error)
      errors++
    }
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  await client.end()

  console.log(`\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
  console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`)
  console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`)
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`)
  console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ!\n`)

  process.exit(0)
}

regenerateImageSizes().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})
