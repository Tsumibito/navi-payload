#!/usr/bin/env tsx
/**
 * –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: Team ‚Üí TeamNew
 *
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã (translations array)
 * –≤ –Ω–æ–≤—É—é —Å—Ö–µ–º—É (–Ω–∞—Ç–∏–≤–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è Payload)
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - Dry-run (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): pnpm migrate:team-localized --dry-run
 * - –¢–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: pnpm migrate:team-localized
 */

import { getPayload } from 'payload';
import config from '../src/payload.config';

type OldTeamMember = {
  id: string | number;
  name: string;
  slug: string;
  position: string;
  photo?: string | number | { id: string | number };
  bio?: any; // JSONB - —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Lexical
  bio_summary?: any; // JSONB
  order?: number;
  links?: Array<{
    service: string;
    url: string;
  }>;
  seo?: {
    title?: string;
    meta_description?: string;
    og_image?: string | number | { id: string | number };
    focus_keyphrase?: string;
    additional_fields?: {
      link_keywords?: string;
    };
    no_index?: boolean;
    no_follow?: boolean;
  };
  translations?: Array<{
    _order?: number;
    language: string;
    name?: string;
    position?: string;
    bio?: any;
    bio_summary?: any;
    seo?: {
      title?: string;
      meta_description?: string;
      focus_keyphrase?: string;
      additional_fields?: {
        link_keywords?: string;
      };
    };
  }>;
};

const extractMediaId = (field: string | number | { id: string | number } | undefined): number | undefined => {
  if (!field) return undefined;
  if (typeof field === 'string') return parseInt(field, 10);
  if (typeof field === 'number') return field;
  return typeof field.id === 'string' ? parseInt(field.id, 10) : field.id;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Lexical JSON (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
const preserveLexicalJSON = (lexicalData: any): any => {
  if (!lexicalData) return undefined;
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSONB –æ–±—ä–µ–∫—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof lexicalData === 'object') return lexicalData;
  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
  if (typeof lexicalData === 'string') {
    try {
      return JSON.parse(lexicalData);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ JSON - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ Lexical
      return {
        root: {
          type: 'root',
          format: '',
          indent: 0,
          version: 1,
          children: [{
            type: 'paragraph',
            format: '',
            indent: 0,
            version: 1,
            children: [{
              type: 'text',
              format: 0,
              text: lexicalData,
              version: 1,
            }],
          }],
        },
      };
    }
  }
  return undefined;
};

async function migrateTeamToLocalized() {
  const args = process.argv.slice(2);
  const isDryRun = args.includes('--dry-run');

  console.log('\nüöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ Team ‚Üí TeamNew');
  console.log(`   –†–µ–∂–∏–º: ${isDryRun ? 'üîç DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' : '‚úçÔ∏è  –ó–ê–ü–ò–°–¨ –í –ë–î'}`);

  const payload = await getPayload({ config });

  try {
    // 1. –ß–∏—Ç–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Team
    console.log('\nüìñ –ß—Ç–µ–Ω–∏–µ team members –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Team...');
    const oldTeamMembers = (await payload.find({
      collection: 'team' as any,
      limit: 1000,
      depth: 0,
    })) as { docs: OldTeamMember[] };

    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${oldTeamMembers.docs.length} team members\n`);

    const stats = {
      processed: 0,
      created: 0,
      skipped: 0,
      errors: 0,
    };

    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ team member
    for (const oldMember of oldTeamMembers.docs) {
      stats.processed++;
      console.log(`\n[${stats.processed}/${oldTeamMembers.docs.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞: ${oldMember.name} (id: ${oldMember.id})`);

      try {
        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤)
        const photoId = extractMediaId(oldMember.photo);
        const seoImageId = extractMediaId(oldMember.seo?.og_image);

        // –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤: –∏–∑ —Å—Ç–∞—Ä—ã—Ö translations –≤ –Ω–∞—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞–ª–∏ Payload
        const localeMap: Record<'ru' | 'uk' | 'en', any> = {
          ru: {
            name: oldMember.name,
            position: oldMember.position,
            bio_summary: preserveLexicalJSON(oldMember.bio_summary),
            bio: preserveLexicalJSON(oldMember.bio),
            seo_title: oldMember.seo?.title || '',
            seo_description: oldMember.seo?.meta_description || '',
            focus_keyphrase: oldMember.seo?.focus_keyphrase || '',
            link_keywords: oldMember.seo?.additional_fields?.link_keywords || '',
          },
          uk: { name: '', position: '', bio_summary: undefined, bio: undefined, seo_title: '', seo_description: '', focus_keyphrase: '', link_keywords: '' },
          en: { name: '', position: '', bio_summary: undefined, bio: undefined, seo_title: '', seo_description: '', focus_keyphrase: '', link_keywords: '' },
        };

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ translations array
        if (oldMember.translations && Array.isArray(oldMember.translations)) {
          for (const trans of oldMember.translations) {
            const lang = trans.language === 'ua' ? 'uk' : trans.language; // ua ‚Üí uk
            if (lang in localeMap) {
              localeMap[lang] = {
                name: trans.name || localeMap[lang].name,
                position: trans.position || localeMap[lang].position,
                bio_summary: preserveLexicalJSON(trans.bio_summary) || localeMap[lang].bio_summary,
                bio: preserveLexicalJSON(trans.bio) || localeMap[lang].bio,
                seo_title: trans.seo?.title || localeMap[lang].seo_title,
                seo_description: trans.seo?.meta_description || localeMap[lang].seo_description,
                focus_keyphrase: trans.seo?.focus_keyphrase || localeMap[lang].focus_keyphrase,
                link_keywords: trans.seo?.additional_fields?.link_keywords || localeMap[lang].link_keywords,
              };
            }
          }
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è links (twitter ‚Üí x)
        const normalizedLinks = oldMember.links?.map(link => ({
          service: link.service === 'twitter' ? 'x' : link.service, // twitter ‚Üí x
          url: link.url,
        })) || [];

        if (isDryRun) {
          console.log('   üîç DRY RUN: –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:');
          console.log(`      - RU: ${localeMap.ru.name} - ${localeMap.ru.position}`);
          console.log(`      - UK: ${localeMap.uk.name || '(–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞)'}`);
          console.log(`      - EN: ${localeMap.en.name || '(–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞)'}`);
          console.log(`      - Photo: ${photoId || '–Ω–µ—Ç'}`);
          console.log(`      - Links: ${normalizedLinks.length}`);
          stats.skipped++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ TeamNew —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –ª–æ–∫–∞–ª—å—é (ru)
        const newMember = await payload.create({
          collection: 'team-new',
          data: {
            name: localeMap.ru.name,
            slug: oldMember.slug,
            position: localeMap.ru.position,
            bio_summary: localeMap.ru.bio_summary,
            bio: localeMap.ru.bio,
            photo: photoId,
            order: oldMember.order || 0,
            links: normalizedLinks,
            seo: {
              title: localeMap.ru.seo_title,
              meta_description: localeMap.ru.seo_description,
              og_image: seoImageId,
              focus_keyphrase: localeMap.ru.focus_keyphrase,
              link_keywords: localeMap.ru.link_keywords,
              no_index: oldMember.seo?.no_index || false,
              no_follow: oldMember.seo?.no_follow || false,
            },
            posts: [], // –°–≤—è–∑–∏ —Å –ø–æ—Å—Ç–∞–º–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
            faqs: [], // FAQs –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            _status: 'published',
          },
          locale: 'ru',
        } as any);

        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω (RU): ${newMember.id}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏ UK –∏ EN, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
        for (const locale of ['uk', 'en'] as const) {
          const localeData = localeMap[locale];
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
          if (!localeData.name && !localeData.position) {
            console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (${locale.toUpperCase()}): –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞`);
            continue;
          }

          await payload.update({
            collection: 'team-new',
            id: newMember.id,
            data: {
              name: localeData.name,
              position: localeData.position,
              bio_summary: localeData.bio_summary,
              bio: localeData.bio,
              seo: {
                title: localeData.seo_title,
                meta_description: localeData.seo_description,
                focus_keyphrase: localeData.focus_keyphrase,
                link_keywords: localeData.link_keywords,
              },
            },
            locale,
          } as any);

          console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω (${locale.toUpperCase()})`);
        }

        stats.created++;
      } catch (error) {
        stats.errors++;
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ team member ${oldMember.name}:`, error);
      }
    }

    console.log('\n============================================================');
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log('============================================================');
    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:  ${stats.processed}`);
    console.log(`–°–æ–∑–¥–∞–Ω–æ:     ${stats.created}`);
    console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ:   ${stats.skipped}`);
    console.log(`–û—à–∏–±–æ–∫:      ${stats.errors}`);
    console.log('============================================================\n');

    console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');

    if (!isDryRun) {
      console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ TeamNew —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É');
      console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã');
    }

    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

migrateTeamToLocalized();
