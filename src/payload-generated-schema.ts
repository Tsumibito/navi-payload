/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  numeric,
  jsonb,
  boolean,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_posts_translations_language = pgEnum(
  "enum_posts_translations_language",
  ["ru", "ua", "en"],
);
export const enum_posts_status = pgEnum("enum_posts_status", [
  "draft",
  "published",
]);
export const enum__posts_v_version_translations_language = pgEnum(
  "enum__posts_v_version_translations_language",
  ["ru", "ua", "en"],
);
export const enum__posts_v_version_status = pgEnum(
  "enum__posts_v_version_status",
  ["draft", "published"],
);
export const enum_tags_translations_language = pgEnum(
  "enum_tags_translations_language",
  ["ru", "ua", "en"],
);
export const enum_tags_status = pgEnum("enum_tags_status", [
  "draft",
  "published",
]);
export const enum__tags_v_version_translations_language = pgEnum(
  "enum__tags_v_version_translations_language",
  ["ru", "ua", "en"],
);
export const enum__tags_v_version_status = pgEnum(
  "enum__tags_v_version_status",
  ["draft", "published"],
);
export const enum_team_links_service = pgEnum("enum_team_links_service", [
  "email",
  "phone",
  "x",
  "facebook",
  "instagram",
  "linkedin",
  "website",
]);
export const enum_team_translations_language = pgEnum(
  "enum_team_translations_language",
  ["ru", "ua", "en"],
);
export const enum_faqs_translations_language = pgEnum(
  "enum_faqs_translations_language",
  ["ru", "ua", "en"],
);
export const enum_certificates_translations_language = pgEnum(
  "enum_certificates_translations_language",
  ["ru", "ua", "en"],
);
export const enum_trainings_translations_language = pgEnum(
  "enum_trainings_translations_language",
  ["ru", "ua", "en"],
);

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => [
    index("users_sessions_order_idx").on(columns._order),
    index("users_sessions_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => [
    index("users_updated_at_idx").on(columns.updatedAt),
    index("users_created_at_idx").on(columns.createdAt),
    uniqueIndex("users_email_idx").on(columns.email),
  ],
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    prefix: varchar("prefix").default("."),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => [
    index("media_updated_at_idx").on(columns.updatedAt),
    index("media_created_at_idx").on(columns.createdAt),
    uniqueIndex("media_filename_idx").on(columns.filename),
  ],
);

export const posts_translations = pgTable(
  "posts_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    language: enum_posts_translations_language("language"),
    name: varchar("name"),
    slug: varchar("slug"),
    summary: varchar("summary"),
    content: jsonb("content"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
  },
  (columns) => [
    index("posts_translations_order_idx").on(columns._order),
    index("posts_translations_parent_id_idx").on(columns._parentID),
    index("posts_translations_seo_seo_og_image_idx").on(columns.seo_og_image),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const posts = pgTable(
  "posts",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    slug: varchar("slug"),
    publishedAt: timestamp("published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    summary: varchar("summary"),
    content: jsonb("content"),
    featured: boolean("featured").default(false),
    socialImages_thumbnail: integer("social_images_thumbnail_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    socialImages_image16x9: integer("social_images_image16x9_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    socialImages_image5x4: integer("social_images_image5x4_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    seo_overall_ui: varchar("seo_overall_ui"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status("_status").default("draft"),
  },
  (columns) => [
    uniqueIndex("posts_slug_idx").on(columns.slug),
    index("posts_image_idx").on(columns.image),
    index("posts_social_images_social_images_thumbnail_idx").on(
      columns.socialImages_thumbnail,
    ),
    index("posts_social_images_social_images_image16x9_idx").on(
      columns.socialImages_image16x9,
    ),
    index("posts_social_images_social_images_image5x4_idx").on(
      columns.socialImages_image5x4,
    ),
    index("posts_seo_seo_og_image_idx").on(columns.seo_og_image),
    index("posts_updated_at_idx").on(columns.updatedAt),
    index("posts_created_at_idx").on(columns.createdAt),
    index("posts__status_idx").on(columns._status),
  ],
);

export const posts_rels = pgTable(
  "posts_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    teamID: integer("team_id"),
    tagsID: integer("tags_id"),
    faqsID: integer("faqs_id"),
  },
  (columns) => [
    index("posts_rels_order_idx").on(columns.order),
    index("posts_rels_parent_idx").on(columns.parent),
    index("posts_rels_path_idx").on(columns.path),
    index("posts_rels_team_id_idx").on(columns.teamID),
    index("posts_rels_tags_id_idx").on(columns.tagsID),
    index("posts_rels_faqs_id_idx").on(columns.faqsID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [posts.id],
      name: "posts_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["teamID"]],
      foreignColumns: [team.id],
      name: "posts_rels_team_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "posts_rels_tags_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "posts_rels_faqs_fk",
    }).onDelete("cascade"),
  ],
);

export const _posts_v_version_translations = pgTable(
  "_posts_v_version_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    language: enum__posts_v_version_translations_language("language"),
    name: varchar("name"),
    slug: varchar("slug"),
    summary: varchar("summary"),
    content: jsonb("content"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
    _uuid: varchar("_uuid"),
  },
  (columns) => [
    index("_posts_v_version_translations_order_idx").on(columns._order),
    index("_posts_v_version_translations_parent_id_idx").on(columns._parentID),
    index("_posts_v_version_translations_seo_seo_og_image_idx").on(
      columns.seo_og_image,
    ),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_version_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const _posts_v = pgTable(
  "_posts_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => posts.id, {
      onDelete: "set null",
    }),
    version_name: varchar("version_name"),
    version_slug: varchar("version_slug"),
    version_publishedAt: timestamp("version_published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_image: integer("version_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_summary: varchar("version_summary"),
    version_content: jsonb("version_content"),
    version_featured: boolean("version_featured").default(false),
    version_socialImages_thumbnail: integer(
      "version_social_images_thumbnail_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_socialImages_image16x9: integer(
      "version_social_images_image16x9_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_socialImages_image5x4: integer(
      "version_social_images_image5x4_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_seo_overall_ui: varchar("version_seo_overall_ui"),
    version_seo_title: varchar("version_seo_title"),
    version_seo_meta_description: varchar("version_seo_meta_description"),
    version_seo_og_image: integer("version_seo_og_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_seo_no_index: boolean("version_seo_no_index").default(false),
    version_seo_no_follow: boolean("version_seo_no_follow").default(false),
    version_seo_focus_keyphrase: varchar("version_seo_focus_keyphrase"),
    version_seo_focus_keyphrase_stats: jsonb(
      "version_seo_focus_keyphrase_stats",
    ),
    version_seo_additional_fields: jsonb("version_seo_additional_fields"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__posts_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => [
    index("_posts_v_parent_idx").on(columns.parent),
    index("_posts_v_version_version_slug_idx").on(columns.version_slug),
    index("_posts_v_version_version_image_idx").on(columns.version_image),
    index("_posts_v_version_social_images_version_social_images_thu_idx").on(
      columns.version_socialImages_thumbnail,
    ),
    index("_posts_v_version_social_images_version_social_images_ima_idx").on(
      columns.version_socialImages_image16x9,
    ),
    index("_posts_v_version_social_images_version_social_images_i_1_idx").on(
      columns.version_socialImages_image5x4,
    ),
    index("_posts_v_version_seo_version_seo_og_image_idx").on(
      columns.version_seo_og_image,
    ),
    index("_posts_v_version_version_updated_at_idx").on(
      columns.version_updatedAt,
    ),
    index("_posts_v_version_version_created_at_idx").on(
      columns.version_createdAt,
    ),
    index("_posts_v_version_version__status_idx").on(columns.version__status),
    index("_posts_v_created_at_idx").on(columns.createdAt),
    index("_posts_v_updated_at_idx").on(columns.updatedAt),
    index("_posts_v_latest_idx").on(columns.latest),
    index("_posts_v_autosave_idx").on(columns.autosave),
  ],
);

export const _posts_v_rels = pgTable(
  "_posts_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    teamID: integer("team_id"),
    tagsID: integer("tags_id"),
    faqsID: integer("faqs_id"),
  },
  (columns) => [
    index("_posts_v_rels_order_idx").on(columns.order),
    index("_posts_v_rels_parent_idx").on(columns.parent),
    index("_posts_v_rels_path_idx").on(columns.path),
    index("_posts_v_rels_team_id_idx").on(columns.teamID),
    index("_posts_v_rels_tags_id_idx").on(columns.tagsID),
    index("_posts_v_rels_faqs_id_idx").on(columns.faqsID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["teamID"]],
      foreignColumns: [team.id],
      name: "_posts_v_rels_team_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "_posts_v_rels_tags_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "_posts_v_rels_faqs_fk",
    }).onDelete("cascade"),
  ],
);

export const tags_translations = pgTable(
  "tags_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    language: enum_tags_translations_language("language"),
    name: varchar("name"),
    slug: varchar("slug"),
    summary: varchar("summary"),
    content: jsonb("content"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
  },
  (columns) => [
    index("tags_translations_order_idx").on(columns._order),
    index("tags_translations_parent_id_idx").on(columns._parentID),
    index("tags_translations_seo_seo_og_image_idx").on(columns.seo_og_image),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [tags.id],
      name: "tags_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const tags = pgTable(
  "tags",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    slug: varchar("slug"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    summary: varchar("summary"),
    content: jsonb("content"),
    descriptionForAI: varchar("description_for_a_i"),
    socialImages_thumbnail: integer("social_images_thumbnail_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    socialImages_image16x9: integer("social_images_image16x9_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    socialImages_image5x4: integer("social_images_image5x4_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    seo_overall_ui: varchar("seo_overall_ui"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_tags_status("_status").default("draft"),
  },
  (columns) => [
    uniqueIndex("tags_slug_idx").on(columns.slug),
    index("tags_image_idx").on(columns.image),
    index("tags_social_images_social_images_thumbnail_idx").on(
      columns.socialImages_thumbnail,
    ),
    index("tags_social_images_social_images_image16x9_idx").on(
      columns.socialImages_image16x9,
    ),
    index("tags_social_images_social_images_image5x4_idx").on(
      columns.socialImages_image5x4,
    ),
    index("tags_seo_seo_og_image_idx").on(columns.seo_og_image),
    index("tags_updated_at_idx").on(columns.updatedAt),
    index("tags_created_at_idx").on(columns.createdAt),
    index("tags__status_idx").on(columns._status),
  ],
);

export const tags_rels = pgTable(
  "tags_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    faqsID: integer("faqs_id"),
  },
  (columns) => [
    index("tags_rels_order_idx").on(columns.order),
    index("tags_rels_parent_idx").on(columns.parent),
    index("tags_rels_path_idx").on(columns.path),
    index("tags_rels_posts_id_idx").on(columns.postsID),
    index("tags_rels_faqs_id_idx").on(columns.faqsID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [tags.id],
      name: "tags_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "tags_rels_posts_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "tags_rels_faqs_fk",
    }).onDelete("cascade"),
  ],
);

export const _tags_v_version_translations = pgTable(
  "_tags_v_version_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    language: enum__tags_v_version_translations_language("language"),
    name: varchar("name"),
    slug: varchar("slug"),
    summary: varchar("summary"),
    content: jsonb("content"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
    _uuid: varchar("_uuid"),
  },
  (columns) => [
    index("_tags_v_version_translations_order_idx").on(columns._order),
    index("_tags_v_version_translations_parent_id_idx").on(columns._parentID),
    index("_tags_v_version_translations_seo_seo_og_image_idx").on(
      columns.seo_og_image,
    ),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_tags_v.id],
      name: "_tags_v_version_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const _tags_v = pgTable(
  "_tags_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => tags.id, {
      onDelete: "set null",
    }),
    version_name: varchar("version_name"),
    version_slug: varchar("version_slug"),
    version_image: integer("version_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_summary: varchar("version_summary"),
    version_content: jsonb("version_content"),
    version_descriptionForAI: varchar("version_description_for_a_i"),
    version_socialImages_thumbnail: integer(
      "version_social_images_thumbnail_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_socialImages_image16x9: integer(
      "version_social_images_image16x9_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_socialImages_image5x4: integer(
      "version_social_images_image5x4_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_seo_overall_ui: varchar("version_seo_overall_ui"),
    version_seo_title: varchar("version_seo_title"),
    version_seo_meta_description: varchar("version_seo_meta_description"),
    version_seo_og_image: integer("version_seo_og_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_seo_no_index: boolean("version_seo_no_index").default(false),
    version_seo_no_follow: boolean("version_seo_no_follow").default(false),
    version_seo_focus_keyphrase: varchar("version_seo_focus_keyphrase"),
    version_seo_focus_keyphrase_stats: jsonb(
      "version_seo_focus_keyphrase_stats",
    ),
    version_seo_additional_fields: jsonb("version_seo_additional_fields"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__tags_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => [
    index("_tags_v_parent_idx").on(columns.parent),
    index("_tags_v_version_version_slug_idx").on(columns.version_slug),
    index("_tags_v_version_version_image_idx").on(columns.version_image),
    index("_tags_v_version_social_images_version_social_images_thum_idx").on(
      columns.version_socialImages_thumbnail,
    ),
    index("_tags_v_version_social_images_version_social_images_imag_idx").on(
      columns.version_socialImages_image16x9,
    ),
    index("_tags_v_version_social_images_version_social_images_im_1_idx").on(
      columns.version_socialImages_image5x4,
    ),
    index("_tags_v_version_seo_version_seo_og_image_idx").on(
      columns.version_seo_og_image,
    ),
    index("_tags_v_version_version_updated_at_idx").on(
      columns.version_updatedAt,
    ),
    index("_tags_v_version_version_created_at_idx").on(
      columns.version_createdAt,
    ),
    index("_tags_v_version_version__status_idx").on(columns.version__status),
    index("_tags_v_created_at_idx").on(columns.createdAt),
    index("_tags_v_updated_at_idx").on(columns.updatedAt),
    index("_tags_v_latest_idx").on(columns.latest),
    index("_tags_v_autosave_idx").on(columns.autosave),
  ],
);

export const _tags_v_rels = pgTable(
  "_tags_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    faqsID: integer("faqs_id"),
  },
  (columns) => [
    index("_tags_v_rels_order_idx").on(columns.order),
    index("_tags_v_rels_parent_idx").on(columns.parent),
    index("_tags_v_rels_path_idx").on(columns.path),
    index("_tags_v_rels_posts_id_idx").on(columns.postsID),
    index("_tags_v_rels_faqs_id_idx").on(columns.faqsID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_tags_v.id],
      name: "_tags_v_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "_tags_v_rels_posts_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "_tags_v_rels_faqs_fk",
    }).onDelete("cascade"),
  ],
);

export const team_links = pgTable(
  "team_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    service: enum_team_links_service("service"),
    url: varchar("url"),
  },
  (columns) => [
    index("team_links_order_idx").on(columns._order),
    index("team_links_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [team.id],
      name: "team_links_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const team_translations = pgTable(
  "team_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    language: enum_team_translations_language("language").notNull(),
    name: varchar("name"),
    summary: varchar("summary"),
    content: jsonb("content"),
    position: varchar("position"),
    bioSummary: jsonb("bio_summary"),
    bio: jsonb("bio"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
  },
  (columns) => [
    index("team_translations_order_idx").on(columns._order),
    index("team_translations_parent_id_idx").on(columns._parentID),
    index("team_translations_seo_seo_og_image_idx").on(columns.seo_og_image),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [team.id],
      name: "team_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const team = pgTable(
  "team",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug").notNull(),
    photo: integer("photo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    position: varchar("position"),
    bioSummary: jsonb("bio_summary"),
    bio: jsonb("bio"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    uniqueIndex("team_slug_idx").on(columns.slug),
    index("team_photo_idx").on(columns.photo),
    index("team_updated_at_idx").on(columns.updatedAt),
    index("team_created_at_idx").on(columns.createdAt),
  ],
);

export const team_rels = pgTable(
  "team_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    certificatesID: integer("certificates_id"),
    trainingsID: integer("trainings_id"),
    faqsID: integer("faqs_id"),
  },
  (columns) => [
    index("team_rels_order_idx").on(columns.order),
    index("team_rels_parent_idx").on(columns.parent),
    index("team_rels_path_idx").on(columns.path),
    index("team_rels_posts_id_idx").on(columns.postsID),
    index("team_rels_certificates_id_idx").on(columns.certificatesID),
    index("team_rels_trainings_id_idx").on(columns.trainingsID),
    index("team_rels_faqs_id_idx").on(columns.faqsID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [team.id],
      name: "team_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "team_rels_posts_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["certificatesID"]],
      foreignColumns: [certificates.id],
      name: "team_rels_certificates_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["trainingsID"]],
      foreignColumns: [trainings.id],
      name: "team_rels_trainings_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "team_rels_faqs_fk",
    }).onDelete("cascade"),
  ],
);

export const faqs_translations = pgTable(
  "faqs_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    language: enum_faqs_translations_language("language").notNull(),
    name: varchar("name"),
    slug: varchar("slug").notNull(),
    summary: varchar("summary"),
    content: jsonb("content"),
    answer: jsonb("answer"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
  },
  (columns) => [
    index("faqs_translations_order_idx").on(columns._order),
    index("faqs_translations_parent_id_idx").on(columns._parentID),
    index("faqs_translations_seo_seo_og_image_idx").on(columns.seo_og_image),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [faqs.id],
      name: "faqs_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const faqs = pgTable(
  "faqs",
  {
    id: serial("id").primaryKey(),
    question: varchar("question").notNull(),
    answer: jsonb("answer"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("faqs_updated_at_idx").on(columns.updatedAt),
    index("faqs_created_at_idx").on(columns.createdAt),
  ],
);

export const faqs_rels = pgTable(
  "faqs_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    tagsID: integer("tags_id"),
    postsID: integer("posts_id"),
  },
  (columns) => [
    index("faqs_rels_order_idx").on(columns.order),
    index("faqs_rels_parent_idx").on(columns.parent),
    index("faqs_rels_path_idx").on(columns.path),
    index("faqs_rels_tags_id_idx").on(columns.tagsID),
    index("faqs_rels_posts_id_idx").on(columns.postsID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [faqs.id],
      name: "faqs_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "faqs_rels_tags_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "faqs_rels_posts_fk",
    }).onDelete("cascade"),
  ],
);

export const certificates_translations = pgTable(
  "certificates_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    language: enum_certificates_translations_language("language").notNull(),
    name: varchar("name"),
    slug: varchar("slug").notNull(),
    content: jsonb("content"),
    description: jsonb("description"),
    requirements: jsonb("requirements"),
    program: jsonb("program"),
    frontImage: integer("front_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    backImage: integer("back_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
  },
  (columns) => [
    index("certificates_translations_order_idx").on(columns._order),
    index("certificates_translations_parent_id_idx").on(columns._parentID),
    index("certificates_translations_front_image_idx").on(columns.frontImage),
    index("certificates_translations_back_image_idx").on(columns.backImage),
    index("certificates_translations_seo_seo_og_image_idx").on(
      columns.seo_og_image,
    ),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [certificates.id],
      name: "certificates_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const certificates = pgTable(
  "certificates",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    slug: varchar("slug").notNull(),
    frontImage: integer("front_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    backImage: integer("back_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    description: jsonb("description"),
    requirements: jsonb("requirements"),
    program: jsonb("program"),
    seo_overall_ui: varchar("seo_overall_ui"),
    seo_title: varchar("seo_title"),
    seo_meta_description: varchar("seo_meta_description"),
    seo_og_image: integer("seo_og_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    seo_no_index: boolean("seo_no_index").default(false),
    seo_no_follow: boolean("seo_no_follow").default(false),
    seo_focus_keyphrase: varchar("seo_focus_keyphrase"),
    seo_focus_keyphrase_stats: jsonb("seo_focus_keyphrase_stats"),
    seo_additional_fields: jsonb("seo_additional_fields"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    uniqueIndex("certificates_slug_idx").on(columns.slug),
    index("certificates_front_image_idx").on(columns.frontImage),
    index("certificates_back_image_idx").on(columns.backImage),
    index("certificates_seo_seo_og_image_idx").on(columns.seo_og_image),
    index("certificates_updated_at_idx").on(columns.updatedAt),
    index("certificates_created_at_idx").on(columns.createdAt),
  ],
);

export const trainings_translations = pgTable(
  "trainings_translations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    language: enum_trainings_translations_language("language").notNull(),
    name: varchar("name"),
    slug: varchar("slug").notNull(),
    content: jsonb("content"),
  },
  (columns) => [
    index("trainings_translations_order_idx").on(columns._order),
    index("trainings_translations_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [trainings.id],
      name: "trainings_translations_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const trainings = pgTable(
  "trainings",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    uniqueIndex("trainings_slug_idx").on(columns.slug),
    index("trainings_updated_at_idx").on(columns.updatedAt),
    index("trainings_created_at_idx").on(columns.createdAt),
  ],
);

export const redirects = pgTable(
  "redirects",
  {
    id: serial("id").primaryKey(),
    fromPath: varchar("from_path").notNull(),
    toPath: varchar("to_path").notNull(),
    statusCode: numeric("status_code").notNull().default("301"),
    createdAtOverride: timestamp("created_at_override", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("redirects_updated_at_idx").on(columns.updatedAt),
    index("redirects_created_at_idx").on(columns.createdAt),
  ],
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("payload_locked_documents_global_slug_idx").on(columns.globalSlug),
    index("payload_locked_documents_updated_at_idx").on(columns.updatedAt),
    index("payload_locked_documents_created_at_idx").on(columns.createdAt),
  ],
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    postsID: integer("posts_id"),
    tagsID: integer("tags_id"),
    teamID: integer("team_id"),
    faqsID: integer("faqs_id"),
    certificatesID: integer("certificates_id"),
    trainingsID: integer("trainings_id"),
    redirectsID: integer("redirects_id"),
  },
  (columns) => [
    index("payload_locked_documents_rels_order_idx").on(columns.order),
    index("payload_locked_documents_rels_parent_idx").on(columns.parent),
    index("payload_locked_documents_rels_path_idx").on(columns.path),
    index("payload_locked_documents_rels_users_id_idx").on(columns.usersID),
    index("payload_locked_documents_rels_media_id_idx").on(columns.mediaID),
    index("payload_locked_documents_rels_posts_id_idx").on(columns.postsID),
    index("payload_locked_documents_rels_tags_id_idx").on(columns.tagsID),
    index("payload_locked_documents_rels_team_id_idx").on(columns.teamID),
    index("payload_locked_documents_rels_faqs_id_idx").on(columns.faqsID),
    index("payload_locked_documents_rels_certificates_id_idx").on(
      columns.certificatesID,
    ),
    index("payload_locked_documents_rels_trainings_id_idx").on(
      columns.trainingsID,
    ),
    index("payload_locked_documents_rels_redirects_id_idx").on(
      columns.redirectsID,
    ),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "payload_locked_documents_rels_posts_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "payload_locked_documents_rels_tags_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["teamID"]],
      foreignColumns: [team.id],
      name: "payload_locked_documents_rels_team_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "payload_locked_documents_rels_faqs_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["certificatesID"]],
      foreignColumns: [certificates.id],
      name: "payload_locked_documents_rels_certificates_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["trainingsID"]],
      foreignColumns: [trainings.id],
      name: "payload_locked_documents_rels_trainings_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["redirectsID"]],
      foreignColumns: [redirects.id],
      name: "payload_locked_documents_rels_redirects_fk",
    }).onDelete("cascade"),
  ],
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("payload_preferences_key_idx").on(columns.key),
    index("payload_preferences_updated_at_idx").on(columns.updatedAt),
    index("payload_preferences_created_at_idx").on(columns.createdAt),
  ],
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => [
    index("payload_preferences_rels_order_idx").on(columns.order),
    index("payload_preferences_rels_parent_idx").on(columns.parent),
    index("payload_preferences_rels_path_idx").on(columns.path),
    index("payload_preferences_rels_users_id_idx").on(columns.usersID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  ],
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("payload_migrations_updated_at_idx").on(columns.updatedAt),
    index("payload_migrations_created_at_idx").on(columns.createdAt),
  ],
);

export const site_globals_social_links = pgTable(
  "site_globals_social_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    service: varchar("service"),
    url: varchar("url"),
  },
  (columns) => [
    index("site_globals_social_links_order_idx").on(columns._order),
    index("site_globals_social_links_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [site_globals.id],
      name: "site_globals_social_links_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const site_globals = pgTable(
  "site_globals",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    tagline: varchar("tagline"),
    description: varchar("description"),
    url: varchar("url"),
    favicon: integer("favicon_id").references(() => media.id, {
      onDelete: "set null",
    }),
    logo: integer("logo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    logoDarkMode: integer("logo_dark_mode_id").references(() => media.id, {
      onDelete: "set null",
    }),
    accentColor: varchar("accent_color"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => [
    index("site_globals_favicon_idx").on(columns.favicon),
    index("site_globals_logo_idx").on(columns.logo),
    index("site_globals_logo_dark_mode_idx").on(columns.logoDarkMode),
  ],
);

export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_posts_translations = relations(
  posts_translations,
  ({ one }) => ({
    _parentID: one(posts, {
      fields: [posts_translations._parentID],
      references: [posts.id],
      relationName: "translations",
    }),
    seo_og_image: one(media, {
      fields: [posts_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: "_rels",
  }),
  teamID: one(team, {
    fields: [posts_rels.teamID],
    references: [team.id],
    relationName: "team",
  }),
  tagsID: one(tags, {
    fields: [posts_rels.tagsID],
    references: [tags.id],
    relationName: "tags",
  }),
  faqsID: one(faqs, {
    fields: [posts_rels.faqsID],
    references: [faqs.id],
    relationName: "faqs",
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  image: one(media, {
    fields: [posts.image],
    references: [media.id],
    relationName: "image",
  }),
  socialImages_thumbnail: one(media, {
    fields: [posts.socialImages_thumbnail],
    references: [media.id],
    relationName: "socialImages_thumbnail",
  }),
  socialImages_image16x9: one(media, {
    fields: [posts.socialImages_image16x9],
    references: [media.id],
    relationName: "socialImages_image16x9",
  }),
  socialImages_image5x4: one(media, {
    fields: [posts.socialImages_image5x4],
    references: [media.id],
    relationName: "socialImages_image5x4",
  }),
  seo_og_image: one(media, {
    fields: [posts.seo_og_image],
    references: [media.id],
    relationName: "seo_og_image",
  }),
  translations: many(posts_translations, {
    relationName: "translations",
  }),
  _rels: many(posts_rels, {
    relationName: "_rels",
  }),
}));
export const relations__posts_v_version_translations = relations(
  _posts_v_version_translations,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_translations._parentID],
      references: [_posts_v.id],
      relationName: "version_translations",
    }),
    seo_og_image: one(media, {
      fields: [_posts_v_version_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: "_rels",
  }),
  teamID: one(team, {
    fields: [_posts_v_rels.teamID],
    references: [team.id],
    relationName: "team",
  }),
  tagsID: one(tags, {
    fields: [_posts_v_rels.tagsID],
    references: [tags.id],
    relationName: "tags",
  }),
  faqsID: one(faqs, {
    fields: [_posts_v_rels.faqsID],
    references: [faqs.id],
    relationName: "faqs",
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: "parent",
  }),
  version_image: one(media, {
    fields: [_posts_v.version_image],
    references: [media.id],
    relationName: "version_image",
  }),
  version_socialImages_thumbnail: one(media, {
    fields: [_posts_v.version_socialImages_thumbnail],
    references: [media.id],
    relationName: "version_socialImages_thumbnail",
  }),
  version_socialImages_image16x9: one(media, {
    fields: [_posts_v.version_socialImages_image16x9],
    references: [media.id],
    relationName: "version_socialImages_image16x9",
  }),
  version_socialImages_image5x4: one(media, {
    fields: [_posts_v.version_socialImages_image5x4],
    references: [media.id],
    relationName: "version_socialImages_image5x4",
  }),
  version_seo_og_image: one(media, {
    fields: [_posts_v.version_seo_og_image],
    references: [media.id],
    relationName: "version_seo_og_image",
  }),
  version_translations: many(_posts_v_version_translations, {
    relationName: "version_translations",
  }),
  _rels: many(_posts_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_tags_translations = relations(
  tags_translations,
  ({ one }) => ({
    _parentID: one(tags, {
      fields: [tags_translations._parentID],
      references: [tags.id],
      relationName: "translations",
    }),
    seo_og_image: one(media, {
      fields: [tags_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations_tags_rels = relations(tags_rels, ({ one }) => ({
  parent: one(tags, {
    fields: [tags_rels.parent],
    references: [tags.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [tags_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  faqsID: one(faqs, {
    fields: [tags_rels.faqsID],
    references: [faqs.id],
    relationName: "faqs",
  }),
}));
export const relations_tags = relations(tags, ({ one, many }) => ({
  image: one(media, {
    fields: [tags.image],
    references: [media.id],
    relationName: "image",
  }),
  socialImages_thumbnail: one(media, {
    fields: [tags.socialImages_thumbnail],
    references: [media.id],
    relationName: "socialImages_thumbnail",
  }),
  socialImages_image16x9: one(media, {
    fields: [tags.socialImages_image16x9],
    references: [media.id],
    relationName: "socialImages_image16x9",
  }),
  socialImages_image5x4: one(media, {
    fields: [tags.socialImages_image5x4],
    references: [media.id],
    relationName: "socialImages_image5x4",
  }),
  seo_og_image: one(media, {
    fields: [tags.seo_og_image],
    references: [media.id],
    relationName: "seo_og_image",
  }),
  translations: many(tags_translations, {
    relationName: "translations",
  }),
  _rels: many(tags_rels, {
    relationName: "_rels",
  }),
}));
export const relations__tags_v_version_translations = relations(
  _tags_v_version_translations,
  ({ one }) => ({
    _parentID: one(_tags_v, {
      fields: [_tags_v_version_translations._parentID],
      references: [_tags_v.id],
      relationName: "version_translations",
    }),
    seo_og_image: one(media, {
      fields: [_tags_v_version_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations__tags_v_rels = relations(_tags_v_rels, ({ one }) => ({
  parent: one(_tags_v, {
    fields: [_tags_v_rels.parent],
    references: [_tags_v.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [_tags_v_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  faqsID: one(faqs, {
    fields: [_tags_v_rels.faqsID],
    references: [faqs.id],
    relationName: "faqs",
  }),
}));
export const relations__tags_v = relations(_tags_v, ({ one, many }) => ({
  parent: one(tags, {
    fields: [_tags_v.parent],
    references: [tags.id],
    relationName: "parent",
  }),
  version_image: one(media, {
    fields: [_tags_v.version_image],
    references: [media.id],
    relationName: "version_image",
  }),
  version_socialImages_thumbnail: one(media, {
    fields: [_tags_v.version_socialImages_thumbnail],
    references: [media.id],
    relationName: "version_socialImages_thumbnail",
  }),
  version_socialImages_image16x9: one(media, {
    fields: [_tags_v.version_socialImages_image16x9],
    references: [media.id],
    relationName: "version_socialImages_image16x9",
  }),
  version_socialImages_image5x4: one(media, {
    fields: [_tags_v.version_socialImages_image5x4],
    references: [media.id],
    relationName: "version_socialImages_image5x4",
  }),
  version_seo_og_image: one(media, {
    fields: [_tags_v.version_seo_og_image],
    references: [media.id],
    relationName: "version_seo_og_image",
  }),
  version_translations: many(_tags_v_version_translations, {
    relationName: "version_translations",
  }),
  _rels: many(_tags_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_team_links = relations(team_links, ({ one }) => ({
  _parentID: one(team, {
    fields: [team_links._parentID],
    references: [team.id],
    relationName: "links",
  }),
}));
export const relations_team_translations = relations(
  team_translations,
  ({ one }) => ({
    _parentID: one(team, {
      fields: [team_translations._parentID],
      references: [team.id],
      relationName: "translations",
    }),
    seo_og_image: one(media, {
      fields: [team_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations_team_rels = relations(team_rels, ({ one }) => ({
  parent: one(team, {
    fields: [team_rels.parent],
    references: [team.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [team_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  certificatesID: one(certificates, {
    fields: [team_rels.certificatesID],
    references: [certificates.id],
    relationName: "certificates",
  }),
  trainingsID: one(trainings, {
    fields: [team_rels.trainingsID],
    references: [trainings.id],
    relationName: "trainings",
  }),
  faqsID: one(faqs, {
    fields: [team_rels.faqsID],
    references: [faqs.id],
    relationName: "faqs",
  }),
}));
export const relations_team = relations(team, ({ one, many }) => ({
  photo: one(media, {
    fields: [team.photo],
    references: [media.id],
    relationName: "photo",
  }),
  links: many(team_links, {
    relationName: "links",
  }),
  translations: many(team_translations, {
    relationName: "translations",
  }),
  _rels: many(team_rels, {
    relationName: "_rels",
  }),
}));
export const relations_faqs_translations = relations(
  faqs_translations,
  ({ one }) => ({
    _parentID: one(faqs, {
      fields: [faqs_translations._parentID],
      references: [faqs.id],
      relationName: "translations",
    }),
    seo_og_image: one(media, {
      fields: [faqs_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations_faqs_rels = relations(faqs_rels, ({ one }) => ({
  parent: one(faqs, {
    fields: [faqs_rels.parent],
    references: [faqs.id],
    relationName: "_rels",
  }),
  tagsID: one(tags, {
    fields: [faqs_rels.tagsID],
    references: [tags.id],
    relationName: "tags",
  }),
  postsID: one(posts, {
    fields: [faqs_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
}));
export const relations_faqs = relations(faqs, ({ many }) => ({
  translations: many(faqs_translations, {
    relationName: "translations",
  }),
  _rels: many(faqs_rels, {
    relationName: "_rels",
  }),
}));
export const relations_certificates_translations = relations(
  certificates_translations,
  ({ one }) => ({
    _parentID: one(certificates, {
      fields: [certificates_translations._parentID],
      references: [certificates.id],
      relationName: "translations",
    }),
    frontImage: one(media, {
      fields: [certificates_translations.frontImage],
      references: [media.id],
      relationName: "frontImage",
    }),
    backImage: one(media, {
      fields: [certificates_translations.backImage],
      references: [media.id],
      relationName: "backImage",
    }),
    seo_og_image: one(media, {
      fields: [certificates_translations.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations_certificates = relations(
  certificates,
  ({ one, many }) => ({
    frontImage: one(media, {
      fields: [certificates.frontImage],
      references: [media.id],
      relationName: "frontImage",
    }),
    backImage: one(media, {
      fields: [certificates.backImage],
      references: [media.id],
      relationName: "backImage",
    }),
    translations: many(certificates_translations, {
      relationName: "translations",
    }),
    seo_og_image: one(media, {
      fields: [certificates.seo_og_image],
      references: [media.id],
      relationName: "seo_og_image",
    }),
  }),
);
export const relations_trainings_translations = relations(
  trainings_translations,
  ({ one }) => ({
    _parentID: one(trainings, {
      fields: [trainings_translations._parentID],
      references: [trainings.id],
      relationName: "translations",
    }),
  }),
);
export const relations_trainings = relations(trainings, ({ many }) => ({
  translations: many(trainings_translations, {
    relationName: "translations",
  }),
}));
export const relations_redirects = relations(redirects, () => ({}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: "posts",
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: "tags",
    }),
    teamID: one(team, {
      fields: [payload_locked_documents_rels.teamID],
      references: [team.id],
      relationName: "team",
    }),
    faqsID: one(faqs, {
      fields: [payload_locked_documents_rels.faqsID],
      references: [faqs.id],
      relationName: "faqs",
    }),
    certificatesID: one(certificates, {
      fields: [payload_locked_documents_rels.certificatesID],
      references: [certificates.id],
      relationName: "certificates",
    }),
    trainingsID: one(trainings, {
      fields: [payload_locked_documents_rels.trainingsID],
      references: [trainings.id],
      relationName: "trainings",
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: "redirects",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_site_globals_social_links = relations(
  site_globals_social_links,
  ({ one }) => ({
    _parentID: one(site_globals, {
      fields: [site_globals_social_links._parentID],
      references: [site_globals.id],
      relationName: "socialLinks",
    }),
  }),
);
export const relations_site_globals = relations(
  site_globals,
  ({ one, many }) => ({
    favicon: one(media, {
      fields: [site_globals.favicon],
      references: [media.id],
      relationName: "favicon",
    }),
    logo: one(media, {
      fields: [site_globals.logo],
      references: [media.id],
      relationName: "logo",
    }),
    logoDarkMode: one(media, {
      fields: [site_globals.logoDarkMode],
      references: [media.id],
      relationName: "logoDarkMode",
    }),
    socialLinks: many(site_globals_social_links, {
      relationName: "socialLinks",
    }),
  }),
);

type DatabaseSchema = {
  enum_posts_translations_language: typeof enum_posts_translations_language;
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_version_translations_language: typeof enum__posts_v_version_translations_language;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum_tags_translations_language: typeof enum_tags_translations_language;
  enum_tags_status: typeof enum_tags_status;
  enum__tags_v_version_translations_language: typeof enum__tags_v_version_translations_language;
  enum__tags_v_version_status: typeof enum__tags_v_version_status;
  enum_team_links_service: typeof enum_team_links_service;
  enum_team_translations_language: typeof enum_team_translations_language;
  enum_faqs_translations_language: typeof enum_faqs_translations_language;
  enum_certificates_translations_language: typeof enum_certificates_translations_language;
  enum_trainings_translations_language: typeof enum_trainings_translations_language;
  users_sessions: typeof users_sessions;
  users: typeof users;
  media: typeof media;
  posts_translations: typeof posts_translations;
  posts: typeof posts;
  posts_rels: typeof posts_rels;
  _posts_v_version_translations: typeof _posts_v_version_translations;
  _posts_v: typeof _posts_v;
  _posts_v_rels: typeof _posts_v_rels;
  tags_translations: typeof tags_translations;
  tags: typeof tags;
  tags_rels: typeof tags_rels;
  _tags_v_version_translations: typeof _tags_v_version_translations;
  _tags_v: typeof _tags_v;
  _tags_v_rels: typeof _tags_v_rels;
  team_links: typeof team_links;
  team_translations: typeof team_translations;
  team: typeof team;
  team_rels: typeof team_rels;
  faqs_translations: typeof faqs_translations;
  faqs: typeof faqs;
  faqs_rels: typeof faqs_rels;
  certificates_translations: typeof certificates_translations;
  certificates: typeof certificates;
  trainings_translations: typeof trainings_translations;
  trainings: typeof trainings;
  redirects: typeof redirects;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  site_globals_social_links: typeof site_globals_social_links;
  site_globals: typeof site_globals;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_posts_translations: typeof relations_posts_translations;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_version_translations: typeof relations__posts_v_version_translations;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_tags_translations: typeof relations_tags_translations;
  relations_tags_rels: typeof relations_tags_rels;
  relations_tags: typeof relations_tags;
  relations__tags_v_version_translations: typeof relations__tags_v_version_translations;
  relations__tags_v_rels: typeof relations__tags_v_rels;
  relations__tags_v: typeof relations__tags_v;
  relations_team_links: typeof relations_team_links;
  relations_team_translations: typeof relations_team_translations;
  relations_team_rels: typeof relations_team_rels;
  relations_team: typeof relations_team;
  relations_faqs_translations: typeof relations_faqs_translations;
  relations_faqs_rels: typeof relations_faqs_rels;
  relations_faqs: typeof relations_faqs;
  relations_certificates_translations: typeof relations_certificates_translations;
  relations_certificates: typeof relations_certificates;
  relations_trainings_translations: typeof relations_trainings_translations;
  relations_trainings: typeof relations_trainings;
  relations_redirects: typeof relations_redirects;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_site_globals_social_links: typeof relations_site_globals_social_links;
  relations_site_globals: typeof relations_site_globals;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
